1. create Docker ID
2. sign In
3. docker download

https://store.docker.com/editions/community/docker-ce-desktop-windows
Get Docker CE for Windows (stable)

4. install

windows pro 는 설치되는데 home의 경우는 Docker Toolbox를 설치한다.
( https://gwonsungjun.github.io/how%20to%20install/2018/01/28/DockerInstall/ )


5. 설치후 재시작 혹은 자동으로 logout이 된다. 재시작한 후 윈도우 트레이를 보면 
docker가 실행된 것을 볼 수 있다.

-------------------------------------------------------------------------------------

cmd를 연다.

docker pull ubuntu:latest

docker images

docker run -i -t --name ubuntu01 ubuntu /bin/bash
해당 이미지를 실행하고 해당 이미지의  /bin/bash 쉘을 실행한다. (foreground 프로세스로 실행된다.)
docker실행시 모두 백그라운드 프로세스면 바로 종료된다.

다른 cmd창을 연다.

docker ps
도커로 실행된 이미지를 볼 수 있다.

기존 cmd에서 다음을 명령한다.

ls

exit
bash를 빠져나온다. docker는 실행중인 foreground 프로세스가 있어야만 계속 실행된다.

docker ps 

실행중인 프로세스가 없는 것을 확인할 수 있다.

docker ps -a
종료된 프로세스도 볼 수 있다.

docker rm 컨테이너id
종료된 프로세스를 삭제한다.

docker kill 컨테이너id
실행중인 프로세스를 삭제할수 있다. (다른 창에서 삭제가능한다.)


--------------------------------------------------------------------------------------

1. docker image를 만든다.(기존 이미지를 base로 만든다.) or 이미지를 받아온다.

이미지를 만들려면 Dockerfile 이라는 txt파일을 작성한다.

2. /Users/carami/docker/redis 폴더를 생성

3. 해당 폴더에 Dockerfile 이라는 파일을 만든다. conf/redis.conf는 미리 만들어 놓는다.

FROM redis:3.0       ----- base이미지
MAINTAINER kyungmi kang <carami@nate.com> ---- 해당 이미지를 만드는 사람 정보

RUN mkdir /var/log/redis   ---- 해당 서버에서 리눅스 명령인 mkdir을 실행해서 폴더를 작성

RUN mkdir /usr/local/etc/redis 

COPY conf/redis.conf /usr/local/etc/redis/redis.conf    -- host컴퓨터의 conf폴더에 있는 redis.conf 파일을 이미지 안에 복사
CMD [ "redis-server", "/usr/local/etc/redis/redis.conf" ] -- 해당 이미지를 실행하면 redis 서버를 실행하는데 레디스 서버의 설정파일로 복사한 파일을 사용한다.

4. Docker 이미지를 생성한다.
redis6379라는 태그 이름으로 image를 생성한다. . 은 현재경로의 Dockerfile을 이용해서 이미지를
만들라는 의미다.

docker build -t redis6379 .

5. docker images 명령으로 확인한다.

6. 내가 만든 이미지를 실행한다.
run - 이미지를 실행한다.
-dit - 백그라운드로 실행한다.
--restart unless-stopped  - docker가 재시작할 때 자동시작.
-p 6379:6379 - 호스트의 6379로 접속하면 도커컨테이너의 6369로 접속된다.(redis의 기본포트)
--name redis6379 도커 프로세스 이름
redis6379 : 이미지 이름

docker run -dit --restart unless-stopped -p 6379:6379 --name redis6379 redis6379

docker exec -i -t redis6379 bash
redis6379컨테이너에 bash로 접속한다.

redis-cli  [enter]   레디스 서버에 접속한다.
auth 1234  // 로그인한다
keys *  // 모든 키 목록을 본다.
exit  // redis-cli 종료
exit // docker접속 종료
---------------------------------------------------------------------------------------

maven run

Goals : clean package

skip tests 는 선택

ROOT.war 파일을 만든다.

oracle_java8_tomcat에 복사한다.

Dockerfile 을 작성한다.

- ubuntu 를 base로 한다.
- oracle jdk8을 다운받아서 설치
- tomcat을 다운받아서 설치
- 설치된 tomcat의 ROOT를 삭제
- ROOT.war를 설치된 tomcat의 webapps폴더에 복사
- 해당 이미지가 실행되면 tomcat이 실행되고 tomcat의 로그를 포그라운드로 보여지도록 한다.

webapp 이미지를 생성한다.
docker build -t carami/webapp:0.1 .


아래와 같이 이미지를 실행

docker ^
  run -dit --restart unless-stopped  ^
  --detach  ^
  --name webapp ^
  --publish 9999:8080 ^
  carami/webapp:0.1


docker logs 컨테이너id

를 하면 로그를 확인할 수 있다.
----------------------------------------------------------
레파지토리에 올린다.

docker login

docker push carami/webapp:0.1

docker push <Docker Hub 사용자 계정>/<이미지 이름>:<태그>

언제든 

docker login

docker pull carami/webapp:0.1 

로 받아올 수 있다.

docker ^
  run -dit --restart unless-stopped  ^
  --detach  ^
  --name webapp ^
  --publish 9999:8080 ^
  carami/webapp:0.1 

------------------------------------------------------------------------------------

docker를 좀 더 편리하게 실행 docker-compose, docker-machine
그외에도 쿠버네티스(kubernetes)  등을 공부해나가야 한다.
---------------------------------------------------------------------------------------
참고문서

https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html

